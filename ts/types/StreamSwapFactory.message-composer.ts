/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, Uint128, InstantiateMsg, Coin, ExecuteMsg, Timestamp, Uint64, UncheckedDenom, Schedule, CreateStreamMsg, CreatePool, MsgCreateConcentratedPool, QueryMsg, Boolean, Addr, Params } from "./StreamSwapController.types";
export interface StreamSwapControllerMsg {
  contractAddress: string;
  sender: string;
  updateParams: ({
    acceptedInDenoms,
    exitFeePercent,
    feeCollector,
    minSecondsUntilStartTime,
    minStreamSeconds,
    streamCreationFee
  }: {
    acceptedInDenoms?: string[];
    exitFeePercent?: Decimal;
    feeCollector?: string;
    minSecondsUntilStartTime?: number;
    minStreamSeconds?: number;
    streamCreationFee?: Coin;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createStream: ({
    msg
  }: {
    msg: CreateStreamMsg;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  freeze: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class StreamSwapControllerMsgComposer implements StreamSwapControllerMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateParams = this.updateParams.bind(this);
    this.createStream = this.createStream.bind(this);
    this.freeze = this.freeze.bind(this);
  }

  updateParams = ({
    acceptedInDenoms,
    exitFeePercent,
    feeCollector,
    minSecondsUntilStartTime,
    minStreamSeconds,
    streamCreationFee
  }: {
    acceptedInDenoms?: string[];
    exitFeePercent?: Decimal;
    feeCollector?: string;
    minSecondsUntilStartTime?: number;
    minStreamSeconds?: number;
    streamCreationFee?: Coin;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_params: {
            accepted_in_denoms: acceptedInDenoms,
            exit_fee_percent: exitFeePercent,
            fee_collector: feeCollector,
            min_seconds_until_start_time: minSecondsUntilStartTime,
            min_stream_seconds: minStreamSeconds,
            stream_creation_fee: streamCreationFee
          }
        })),
        funds: _funds
      })
    };
  };
  createStream = ({
    msg
  }: {
    msg: CreateStreamMsg;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_stream: {
            msg
          }
        })),
        funds: _funds
      })
    };
  };
  freeze = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          freeze: {}
        })),
        funds: _funds
      })
    };
  };
}